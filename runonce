#!/bin/bash 

local_admin_user="local-admin"
nexus_keycloak_plugin="0.5.0"
nexus_apk_plugin="0.0.23"
netcicd_pwd="netcicd"
keycloak_pwd="Pa55w0rd"
keycloak_storepass="password"
freeipa_pwd="Pa55w0rd"
jenkins_storepass="changeit"
nexus_storepass="password"

sp="/-\|"
sc=0
spin() {
   printf -- "${sp:sc++:1}  ( ${t} sec.) \r"
   ((sc==${#sp})) && sc=0
   sleep 1
   let t+=1
}

endspin() {
   printf "\r%s\n" "$@"
}


echo "****************************************************************************************************************"
echo " Start clean" 
echo "****************************************************************************************************************"
docker-compose down --remove-orphans
docker-compose rm -f
docker volume rm $(docker volume ls -q)
rm -f *_token
rm -f install_tests/log.html
rm -f install_tests/output.xml
rm -f install_tests/report.html
rm -f install_tests/*.png
rm -f install_tests/*.log
rm -f install_log/*
rm -f freeipa/certs/*
rm -f freeipa/hostcerts/*
rm -f nexus/keystore.jks
rm -f cicdtoolbox-db/cicdtoolbox-db.*
echo " " 
echo "****************************************************************************************************************"
echo " Cleaning Gitea" 
echo "****************************************************************************************************************"
sudo rm -rf gitea/data/*
echo " " 
echo "****************************************************************************************************************"
echo " Cleaning Nexus" 
echo "****************************************************************************************************************"
sudo rm -rf nexus/data/*
sudo rm -rf nexus/*.kar
echo " " 
echo "****************************************************************************************************************"
echo " Making sure all containers are reachable locally with the name in the"
echo " hosts file."
echo "****************************************************************************************************************"
echo " " 
sudo chmod o+w /etc/hosts
if grep -q "gitea" /etc/hosts; then
    echo " Gitea exists in /etc/hosts, removing..."
    sudo sed -i '/gitea.tooling.test/d' /etc/hosts
fi
echo " Add Gitea to /etc/hosts"
sudo echo "172.16.11.3   gitea.tooling.test" >> /etc/hosts

if grep -q "jenkins" /etc/hosts; then
    echo " Jenkins exists in /etc/hosts, removing..."
    sudo sed -i '/jenkins.tooling.test/d' /etc/hosts
fi
echo " Add Jenkins to /etc/hosts"
sudo echo "172.16.11.8   jenkins.tooling.test" >> /etc/hosts

if grep -q "nexus" /etc/hosts; then
    echo " Nexus exists in /etc/hosts, removing..."
    sudo sed -i '/nexus.tooling.test/d' /etc/hosts
fi
echo " Add Nexus to /etc/hosts"
sudo echo "172.16.11.9   nexus.tooling.test" >> /etc/hosts

if grep -q "keycloak" /etc/hosts; then
    echo " Keycloak exists in /etc/hosts, removing..."
    sudo sed -i '/keycloak.tooling.test/d' /etc/hosts
fi
echo " Add Keycloak to /etc/hosts"
sudo echo "172.16.11.11   keycloak.tooling.test" >> /etc/hosts

if grep -q "freeipa" /etc/hosts; then
    echo " FreeIPA exists in /etc/hosts, removing..."
    sudo sed -i '/freeipa.tooling.test/d' /etc/hosts
fi
echo " Add FreeIPA to /etc/hosts"
sudo echo "172.16.11.12   freeipa.tooling.test" >> /etc/hosts

if grep -q "ipa-ca" /etc/hosts; then
    echo " ipa-ca exists in /etc/hosts, removing..."
    sudo sed -i '/ipa-ca.tooling.test/d' /etc/hosts
fi
echo " Add ipa-ca /etc/hosts"
sudo echo "172.16.11.12   ipa-ca.tooling.test" >> /etc/hosts

if grep -q "portainer" /etc/hosts; then
    echo " Portainer exists in /etc/hosts, removing..."
    sudo sed -i '/portainer.tooling.test/d' /etc/hosts
fi
echo " Add Portainer to /etc/hosts"
sudo echo "172.16.11.15   portainer.tooling.test" >> /etc/hosts

if grep -q "cml" /etc/hosts; then
    echo " Cisco Modeling Labs exists in /etc/hosts, removing..."
    sudo sed -i '/cml.tooling.test/d' /etc/hosts
fi
echo " Add Cisco Modeling Labs to /etc/hosts"
sudo echo "10.10.20.161   cml.tooling.test" >> /etc/hosts
sudo chmod o-w /etc/hosts
echo " " 
echo "****************************************************************************************************************"
echo " Collecting Nexus Keycloak plugin" 
echo "****************************************************************************************************************"
if [ -f "nexus/nexus3-keycloak-plugin-$nexus_keycloak_plugin-bundle.kar" ]; then
    echo " Nexus Keycloak plugin exists"
else
    echo " Get Nexus Keycloak plugin"
    wget --directory-prefix=nexus https://github.com/flytreeleft/nexus3-keycloak-plugin/releases/download/v$nexus_keycloak_plugin/nexus3-keycloak-plugin-$nexus_keycloak_plugin-bundle.kar
fi
echo " " 
echo "****************************************************************************************************************"
echo " Collecting Nexus APK plugin and build .kar file"
echo "****************************************************************************************************************"
if [ -f "nexus/nexus-repository-apk-$nexus_apk_plugin-bundle.kar" ]; then
    echo " Nexus apk plugin exists"
else
    echo " Get Nexus apk plugin"
    wget -O nexus/nexus-repository-apk-$nexus_apk_plugin-bundle.kar https://search.maven.org/remotecontent?filepath=org/sonatype/nexus/plugins/nexus-repository-apk/$nexus_apk_plugin/nexus-repository-apk-$nexus_apk_plugin-bundle.kar
fi
echo " " 
echo "****************************************************************************************************************"
echo " git clone Nexus CasC plugin and build .kar file"
echo "****************************************************************************************************************"
if [ ! -f ./nexus/nexus-casc* ]; then
    git clone https://github.com/AdaptiveConsulting/nexus-casc-plugin.git
    cd nexus-casc-plugin
    mvn package
    cp target/*.kar ../nexus/
    cd ..
    rm -rf nexus-casc-plugin/
else
    echo "Casc plugin exists, no need to build"
fi
echo " " 
echo "****************************************************************************************************************"
echo " Creating CSR for all containers, so they can be copied in in the Dockerfile" 
echo "****************************************************************************************************************"
freeipa/create-certificates.sh cicdtoolbox-db
freeipa/create-certificates.sh gitea
freeipa/create-certificates.sh jenkins
freeipa/create-certificates.sh keycloak
freeipa/create-certificates.sh nexus
freeipa/create-certificates.sh portainer
echo "****************************************************************************************************************"
echo " Creating freeIPA"
echo "****************************************************************************************************************"
docker-compose pull 
docker-compose up -d --build --remove-orphans freeipa.tooling.test
echo "****************************************************************************************************************"
echo " Wait until FreeIPA has self-installed (~375 sec)"
echo "****************************************************************************************************************"
let t=0
until  docker logs freeipa.tooling.test | grep "ipa-server-install command was successful"; do
    spin
done
endspin
echo " "
echo "****************************************************************************************************************"
echo " Saving FreeIPA self-signed certificate"
echo "****************************************************************************************************************"
docker cp freeipa.tooling.test:/etc/ipa/ca.crt ca.crt
cp ca.crt keycloak/ca.crt
cp ca.crt nexus/ca.crt
cp ca.crt cicdtoolbox-db/ca.crt
echo "****************************************************************************************************************"
echo " Copy csr files to FreeIPA for signing"
echo "****************************************************************************************************************"
docker cp freeipa/cert* freeipa.tooling.test:/tmp
echo "****************************************************************************************************************"
echo " Creating FreeIPA setup. This will take time..."
echo "****************************************************************************************************************"
docker exec -it freeipa.tooling.test sh -c "/root/freeipa-install.sh ${netcicd_pwd} ${freeipa_pwd}" | tee install_log/freeipa_create.log
echo " " 
echo "****************************************************************************************************************"
echo " Saving host certificates"
echo "****************************************************************************************************************"
docker cp freeipa.tooling.test:/tmp/certs freeipa/
chmod 644 freeipa/certs/*
cp freeipa/certs/cicdtoolbox-db* cicdtoolbox-db/
docker exec freeipa.tooling.test rm -rf /tmp/host*
echo " "
echo "****************************************************************************************************************"
echo " Creating database"
echo "****************************************************************************************************************"
DOCKER_BUILDKIT=1 docker-compose up -d --build cicdtoolbox-db
sleep 10
docker cp ca.crt /usr/local/share/ca-certificates/ca.crt
# RUN update-ca-certificates
echo " " 
echo "****************************************************************************************************************"
echo " Starting Keycloak "
echo "****************************************************************************************************************"
docker-compose up -d --build --no-deps keycloak.tooling.test
echo "****************************************************************************************************************"
echo " Wait until keycloak is running (~45 sec.)"
echo "****************************************************************************************************************"
let t=0
until $(curl --output /dev/null --insecure --silent --head --fail https://keycloak.tooling.test:8443); do
    spin
done
endspin
echo " "
echo "****************************************************************************************************************"
echo " Creating keycloak setup. This will take time..."
echo "****************************************************************************************************************"
docker exec -it keycloak.tooling.test sh -c "/opt/jboss/keycloak/bin/create-realm.sh ${keycloak_pwd} ${keycloak_storepass} ${freeipa_pwd} ${local_admin_user}" | tee install_log/keycloak_create.log
echo " "
docker restart keycloak.tooling.test
echo "****************************************************************************************************************"
echo " Wait until keycloak is running (~5 sec.)"
echo "****************************************************************************************************************"
let t=0
until $(curl --output /dev/null --insecure --silent --head --fail https://keycloak.tooling.test:8443); do
    spin
done
endspin
echo " "
echo "****************************************************************************************************************"
echo " Booting the remainder of the containers"
echo "****************************************************************************************************************"
docker-compose up -d --build --no-deps gitea.tooling.test
docker-compose up -d --build --no-deps jenkins.tooling.test
docker-compose up -d --build --no-deps nexus.tooling.test
docker-compose up -d --build --no-deps portainer.tooling.test
echo " "
echo "****************************************************************************************************************"
echo " Creating gitea setup"
echo "****************************************************************************************************************"
gitea/gitea_install.sh ${netcicd_pwd} ${local_admin_user} | tee install_log/gitea_create.log
gitea/gitea_users.sh ${netcicd_pwd} ${local_admin_user} | tee install_log/gitea_users.log
echo " " 
echo "****************************************************************************************************************"
echo " Creating nexus setup"
echo "****************************************************************************************************************"
docker cp keycloak.tooling.test:/opt/jboss/keycloak/bin/keycloak-nexus.json nexus/keycloak-nexus.json
docker cp nexus/keycloak-nexus.json nexus.tooling.test:/opt/sonatype/nexus/etc/keycloak.json
keytool -import -alias nexus.tooling.test -keystore ./nexus/keystore.jks -file ./freeipa/certs/nexus.tooling.test.pem -storepass ${nexus_storepass} -noprompt
docker cp ./nexus/keystore.jks nexus.tooling.test:/nexus-data/etc/ssl/keystore.jks
echo "Reloading Nexus"
docker restart nexus.tooling.test
let t=0
until $(curl --output /dev/null --insecure --silent --head --fail http://nexus.tooling.test:8081); do
    spin
done
endspin
echo " "
echo "****************************************************************************************************************"
echo " Creating jenkins setup"
echo "****************************************************************************************************************"
#config for oic_auth plugin: need to replace secrets in casc.yaml
jenkins_client_id=$(grep JENKINS_token: install_log/keycloak_create.log | cut -d' ' -f2 | tr -d '\r' )
docker exec -it jenkins.tooling.test sh -c "sed -i -e 's/oic_secret/\"$jenkins_client_id\"/' /var/jenkins_conf/casc.yaml"
echo " " 
echo "****************************************************************************************************************"
echo " Copy certificates into Jenkins keystore"
echo "****************************************************************************************************************"
#Add CA to keystore
docker cp jenkins.tooling.test:/opt/java/openjdk/lib/security/cacerts ./jenkins/keystore/cacerts
chmod +w ./jenkins/keystore/cacerts
keytool -import -alias freeipa.tooling.test -keystore ./jenkins/keystore/cacerts -file ./ca.crt -storepass ${jenkins_storepass} -noprompt
docker cp ./jenkins/keystore/cacerts jenkins.tooling.test:/opt/java/openjdk/lib/security/cacerts
echo "Reloading "
docker restart jenkins.tooling.test
let t=0
until $(curl --output /dev/null --insecure --silent --head --fail https://jenkins.tooling.test:8084/whoAmI); do
    spin
done
endspin
echo " " 
echo "****************************************************************************************************************"
echo " Preparing for finalizing install via ROBOT"
echo "****************************************************************************************************************"
sudo pip3 install robotframework robotframework-selenium2library
sudo cp geckodriver /usr/local/bin/
source ~/.bashrc
robot --variable VALID_PASSWORD:${netcicd_pwd} -d install_tests/ install_tests
echo " " 
echo "****************************************************************************************************************"
echo " Running trivy vulnerability scanner (https://github.com/aquasecurity/trivy)" 
echo "****************************************************************************************************************"
if command -v trivy &> /dev/null
then
echo "****************************************************************************************************************"
echo " Toolbox files" 
echo "****************************************************************************************************************"
    trivy fs --security-checks vuln,config . | tee install_log/trivy_create.log
echo "****************************************************************************************************************"
echo " FreeIPA" 
echo "****************************************************************************************************************"
    trivy image freeipa/freeipa-server:centos-8-stream | tee -a install_log/trivy_create.log
echo "****************************************************************************************************************"
echo " Gitea" 
echo "****************************************************************************************************************"
    trivy image gitea/gitea:rootless | tee -a install_log/trivy_create.log
echo "****************************************************************************************************************"
echo " Jenkins" 
echo "****************************************************************************************************************"
    trivy image jenkins/jenkins:lts | tee -a install_log/trivy_create.log
echo "****************************************************************************************************************"
echo " Keycloak" 
echo "****************************************************************************************************************"
    trivy image jboss/keycloak:latest | tee -a install_log/trivy_create.log
echo "****************************************************************************************************************"
echo " PostgreSQL" 
echo "****************************************************************************************************************"
    trivy image postgres:latest | tee -a install_log/trivy_create.log
echo "****************************************************************************************************************"
echo " Nexus" 
echo "****************************************************************************************************************"
    trivy image sonatype/nexus3:latest | tee -a install_log/trivy_create.log
echo "****************************************************************************************************************"
echo " Portainer" 
echo "****************************************************************************************************************"
    trivy image portainer/portainer-ce | tee -a install_log/trivy_create.log
else
    echo "trivy is not installed"
fi
echo "****************************************************************************************************************"
echo " The pipeline uses the default Cisco DevNet CML Sandbox credentials developer/C1sco12345 to log in to CML."
echo " You may change this to your own credentials in:"
echo " "
echo " http://jenkins.tooling.test:8084/credentials/store/system/domain/_/credential/CML-SIM-CRED/update"
echo " "
echo " Due to limitations in Keycloak, do **not** use docker-compose down. Keycloak will no longer function after this."
echo " "
echo " Stop the environment with ./down, start with ./up"
echo " "
echo "****************************************************************************************************************"
echo "NetCICD Toolkit install done "
echo " "
echo "You can read the install test report in install_tests/report.html"
echo " "
echo "You can reach the servers on:"
echo " "
echo " Gitea:       https://gitea.tooling.test:3000"
echo " Jenkins:     http://jenkins.tooling.test:8084"
echo " Nexus:       http://nexus.tooling.test:8081"
echo " Keycloak:    http://keycloak.tooling.test:8443"
echo " FreeIPA:     http://freeipa.tooling.test"
echo " Portainer:   http://portainer.tooling.test:9000"
echo " "
echo "****************************************************************************************************************"
echo "Cleaning up"
echo "****************************************************************************************************************"
