swagger: "2.0"
info:
  description: "This is the Swagger API voor an imaginary SP called Prov."
  version: "0.0.1"
  title: "Provider Portal"
  termsOfService: "https://portal.services.provider.test/terms"
  contact:
    email: "automation@provider.test"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "restportal.services.provider.test"
basePath: "/v001"
externalDocs:
  description: 'For information on the services, see the portal'
  url: 'https://restportal.services.provider.test/portfolio'
schemes:
- "https"
- "http"
consumes:
- application/json
- application/xml
produces:
- application/json
- application/xml
responses:
  InternalServerError:
    description: Internal Server Error
  NotFound:
    description: Not Found
securityDefinitions:
  provportal_auth:
    type: oauth2
    authorizationUrl: 'http://oauth.services.provider.test/oauth/dialog'
    flow: implicit
    scopes:
      write:tenant: Change Tenants
      read:tenant: Retrieve data about Tenants
      write:az: Change AZ
      read:az: Retrieve data about an AZ
      write:computecluster: Change Compute Cluster
      read:computecluster: Retrieve data about Compute Cluster
      write:storagecontroller: Change Storage Controller
      read:storagecontroller: Retrieve data about Storage Controller
      write:storagecluster: Change Storage Cluster
      read:storagecluster: Retrieve data about Storage Cluster
      write:application: Change Application
      read:application: Retrieve data about an Application
      write:environment: Change an environment
      read:environment: Retrieve data about an environment
      write:compartiment: Change a compartiment
      read:compartiment: Retrieve data about a compartiment
      write:server: Change a Server
      read:server: Retrieve data about a Server
      write:image: Change an image
      read:image: Retrieve data about an image
      write:conduit: Change a conduit
      read:conduit: Retrieve data about a conduit
      write:database: Change a database
      read:database: Retrieve data about a database
      write:domein: Change a domain
      read:domein: Retrieve data about a domain
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
tags:
- name: tenant
  description: The tenant owning applications.
  externalDocs:
    description: ProductOffering
    url: 'https://portal.services.provider.test/portfolio'
- name: az
  description: Hosting environment for applications.
  externalDocs:
    description: ProductOffering
    url: 'https://portal.services.provider.test/portfolio'
- name: computeCluster
  description: Platform for Hosting.
  externalDocs:
    description: ProductOffering
    url: 'https://portal.services.provider.test/portfolio'
- name: storageController
  description: Access system for a storagecluster.
  externalDocs:
    description: ProductOffering
    url: 'https://portal.services.provider.test/portfolio'
- name: storageCluster
  description: Hosting platform for Data.
  externalDocs:
    description: ProductOffering
    url: 'https://portal.services.provider.test/portfolio'
- name: application
  description: Attachment point for environments.
  externalDocs:
    description: ProductOffering
    url: 'https://portal.services.provider.test/portfolio'
- name: environment
  description: Environment.
  externalDocs:
    description: ProductOffering
    url: 'https://portal.services.provider.test/portfolio'
- name: compartiment
  description: Tier of an application/subnet.
  externalDocs:
    description: ProductOffering
    url: 'https://portal.services.provider.test/portfolio'
- name: server
  description: Compute machine, (virtual) hardware.
  externalDocs:
    description: ProductOffering
    url: 'https://portal.services.provider.test/portfolio'
- name: image
  description: Operating system and system software.
  externalDocs:
    description: ProductOffering
    url: 'https://portal.services.provider.test/portfolio'
- name: conduit
  description: Traffic path to or from an environment.
  externalDocs:
    description: ProductOffering
    url: 'https://portal.services.provider.test/portfolio'
- name: database
  description: MS SQL, Oracle or PostgreSQL database
  externalDocs:
    description: ProductOffering
    url: 'https://portal.services.provider.test/portfolio'
- name: domein
  description: Fully Qualified Domain Name
  externalDocs:
    description: ProductOffering
    url: 'https://portal.services.provider.test/portfolio'
paths:
  /tenants/:
    post:
      tags:
      - tenant
      summary: Add a tenant
      description: Approval required.
      operationId: addTenant
      consumes:
      - application/json
      - application/xml
      produces:
      - application/xml
      - application/json
      parameters:
      - description: Tenant to be added
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/tenant'
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/tenant'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/error'
        "405":
          description: Invalid input
        "500":
          description: Internal Server Error
        "501":
          description: Not implemented
    put:
      tags:
      - tenant
      summary: Edit existing tenant.
      description: Edit a tenant.
      operationId: updateTenant
      consumes:
      - application/json
      - application/xml
      produces:
      - application/xml
      - application/json
      parameters:
      - description: Edit existing tenant.
        in: body
        name: payload
        required: true      
        schema:
          $ref: '#/definitions/tenant'
      responses:
        "201":
          description: Updated
          schema:
            $ref: '#/definitions/tenant'
        "400":
          description: ID invalid
        "404":
          description: Not Found
        "405":
          description: Validation error
        "501":
          description: Not implemented
  /tenants/{id}:
    get:
      tags:
      - tenant
      summary: Find tenant on ID.
      description: Return a single tenant
      operationId: getTenantById
      produces:
      - application/xml
      - application/json
      parameters:
      - description: Find tenant on ID.
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/tenant'
        "404":
          description: Not Found
        "405":
          description: Invalid input
        "500":
          description: Internal Server Error
        "501":
          description: Not implemented
      security:
      - api_key: []
    post:
      tags:
      - tenant
      summary: Edit existing tenant with form data.
      description: None
      operationId: updateTenantWithForm
      consumes:
      - application/x-www-form-urlencoded
      produces:
      - application/xml
      - application/json
      parameters:
      - description: ID of the tenant to be edited.
        in: path
        name: id
        required: true
        type: integer
      - description: Changed name
        in: formData
        name: name        
        required: false
        type: string
      - description: Changed status
        in: formData
        name: status
        required: false
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/tenant'
        "404":
          description: Not Found
        "405":
          description: Invalid input
        "500":
          description: Internal Server Error
        "501":
          description: Not implemented
    delete:
      tags:
      - tenant
      summary: Remove a tenant.
      description: Remove a tenant.
      operationId: deleteTenant
      produces:
      - application/xml
      - application/json
      parameters:
      - name: "api_key"
        in: "header"
        required: false
        type: "string"
      - description: ID of the tenant to be removed.
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/tenant'
        "404":
          description: Not Found
        "405":
          description: Invalid input
        "500":
          description: Internal Server Error
        "501":
          description: Not implemented
  /azs/:
    post:
      tags:
      - az
      summary: Add an AZ
      description: Approval required
      operationId: addAZ
      consumes:
      - application/json
      - application/xml
      produces:
      - application/xml
      - application/json
      parameters:
      - description: Add an AZ
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/az'
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/az'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/error'
        "405":
          description: Invalid input
        "500":
          description: Internal Server Error
        "501":
          description: Not implemented
    put:
      tags:
      - az
      summary: Edit an AZ
      description: Edit an AZ.
      operationId: updateAZ
      consumes:
      - application/json
      - application/xml
      produces:
      - application/xml
      - application/json
      parameters:
      - description: Edit an AZ.
        in: body
        name: payload
        required: true      
        schema:
          $ref: '#/definitions/az'
      responses:
        "201":
          description: Updated
          schema:
            $ref: '#/definitions/az'
        "400":
          description: Invalid ID
        "404":
          description: Not Found
        "405":
          description: Validation error
        "501":
          description: Not implemented
  /azs/{id}:
    get:
      tags:
      - az
      summary: Find AZ on ID.
      description: Returns a single AZ
      operationId: getAZById
      produces:
      - application/xml
      - application/json
      parameters:
      - description: Find AZ on ID.
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/az'
        "404":
          description: Not Found
        "405":
          description: Invalid input
        "500":
          description: Internal Server Error
        "501":
          description: Not implemented
      security:
      - api_key: []
    post:
      tags:
      - az
      summary: Edit an AZ with form data.
      description: None
      operationId: updateAZWithForm
      consumes:
      - application/x-www-form-urlencoded
      produces:
      - application/xml
      - application/json
      parameters:
      - description: ID of the AZ to be edited
        in: path
        name: id
        required: true
        type: integer
      - description: Edited name
        in: formData
        name: name        
        required: false
        type: string
      - description: Edited status
        in: formData
        name: status
        required: false
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/az'
        "404":
          description: Not Found
        "405":
          description: Invalid input
        "500":
          description: Internal Server Error
        "501":
          description: Not implemented
    delete:
      tags:
      - az
      summary: Remove an AZ.
      description: Remove an AZ.
      operationId: deleteAZ
      produces:
      - application/xml
      - application/json
      parameters:
      - name: "api_key"
        in: "header"
        required: false
        type: "string"
      - description: ID of the AZ to be removed.
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/az'
        "404":
          description: Not Found
        "405":
          description: Invalid input
        "500":
          description: Internal Server Error
        "501":
          description: Not implemented
  /applications/:
    post:
      tags:
      - application
      summary: Add an application 
      description: Permission required.
      operationId: addApplication
      consumes:
      - application/json
      - application/xml
      produces:
      - application/xml
      - application/json
      parameters:
      - description: Add an application 
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/application'
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/application'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/error'
        "405":
          description: Invalid input
        "500":
          description: Internal Server Error
        "501":
          description: Not implemented
    put:
      tags:
      - application
      summary: Edit an  application.
      description: Edit an  application.
      operationId: updateApplication
      consumes:
      - application/json
      - application/xml
      produces:
      - application/xml
      - application/json
      parameters:
      - description: Edit an  application.
        in: body
        name: payload
        required: true      
        schema:
          $ref: '#/definitions/application'
      responses:
        "201":
          description: OK
          schema:
            $ref: '#/definitions/application'
        "404":
          description: Not Found
        "405":
          description: Invalid input
        "500":
          description: Internal Server Error
        "501":
          description: Not implemented
  /applications/{id}:
    get:
      tags:
      - application
      summary: Find application on ID.
      description: Returns single application
      operationId: getApplicationById
      produces:
      - application/xml
      - application/json
      parameters:
      - description: Application to be found
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/application'
        "404":
          description: Not Found
        "405":
          description: Invalid input
        "500":
          description: Internal Server Error
        "501":
          description: Not implemented
      security:
      - api_key: []
    post:
      tags:
      - application
      summary: Edit application with form data.
      description: None
      operationId: updateApplicationWithForm
      consumes:
      - application/x-www-form-urlencoded
      produces:
      - application/xml
      - application/json
      parameters:
      - description: ID of the application to be edited
        in: path
        name: id
        required: true
        type: integer
      - description: Edited name
        in: formData
        name: name        
        required: false
        type: string
      - description: Edited status
        in: formData
        name: status
        required: false
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/application'
        "404":
          description: Not Found
        "405":
          description: Invalid input
        "500":
          description: Internal Server Error
        "501":
          description: Not implemented
    delete:
      tags:
      - application
      summary: Delete a application.
      description: Delete a application.
      operationId: deleteApplication
      produces:
      - application/xml
      - application/json
      parameters:
      - name: "api_key"
        in: "header"
        required: false
        type: "string"
      - description: ID of the application to be deleted
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/application'
        "404":
          description: Not Found
        "405":
          description: Invalid input
        "500":
          description: Internal Server Error
        "501":
          description: Not implemented
  /environments/:
    post:
      tags:
      - environment
      summary: Add a new environment
      description: Permission required
      operationId: addEnvironment
      consumes:
      - application/json
      - application/xml
      produces:
      - application/xml
      - application/json
      parameters:
      - description: Environment to be added
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/environment'
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/environment'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/error'
        "405":
          description: Invalid input
        "500":
          description: Internal Server Error
        "501":
          description: Not implemented
    put:
      tags:
      - environment
      summary: Edit existing environment
      description: Edit existing environment
      operationId: updateEnvironment
      consumes:
      - application/json
      - application/xml
      produces:
      - application/xml
      - application/json
      parameters:
      - description: Environment to be edited
        in: body
        name: payload
        required: true      
        schema:
          $ref: '#/definitions/environment'
      responses:
        "201":
          description: Updated
          schema:
            $ref: '#/definitions/environment'
        "400":
          description: ID ongeldig/bestaat niet
        "404":
          description: Environment niet gevonden
        "405":
          description: Validatieprobleem
        "501":
          description: Not implemented
  /environments/{id}:
    get:
      tags:
      - environment
      summary: Find environment on ID.
      description: Geeft enkele environment terug.
      operationId: getEnvironmentById
      produces:
      - application/xml
      - application/json
      parameters:
      - description: Environment to be found
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/environment'
        "404":
          description: Not Found
        "405":
          description: Invalid input
        "500":
          description: Internal Server Error
        "501":
          description: Not implemented
      security:
      - api_key: []
    post:
      tags:
      - environment
      summary: Edit environment with form data.
      description: None
      operationId: updateEnvironmentWithForm
      consumes:
      - application/x-www-form-urlencoded
      produces:
      - application/xml
      - application/json
      parameters:
      - description: ID of the environment to be edited
        in: path
        name: id
        required: true
        type: integer
      - description: Edited name
        in: formData
        name: name        
        required: false
        type: string
      - description: Edited status
        in: formData
        name: status
        required: false
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/environment'
        "404":
          description: Not Found
        "405":
          description: Invalid input
        "500":
          description: Internal Server Error
        "501":
          description: Not implemented
    delete:
      tags:
      - environment
      summary: Delete a environment.
      description: Delete a environment.
      operationId: deleteEnvironment
      produces:
      - application/xml
      - application/json
      parameters:
      - name: "api_key"
        in: "header"
        required: false
        type: "string"
      - description: ID of the environment to be deleted
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/environment'
        "404":
          description: Not Found
        "405":
          description: Invalid input
        "500":
          description: Internal Server Error
        "501":
          description: Not implemented
  /servers/:
    post:
      tags:
      - server
      summary: Ass a new server toevoegen
      description: Toevoegen kan alleen als de server zowel in Topdesk is aangemaakt. Dit wordt bij uitvoering of the call gecontroleerd tegen deze systemen.
      operationId: addServer
      consumes:
      - application/json
      - application/xml
      produces:
      - application/xml
      - application/json
      parameters:
      - description: Server to be added
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/server'
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/server'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/error'
        "405":
          description: Invalid input
        "500":
          description: Internal Server Error
        "501":
          description: Not implemented
    put:
      tags:
      - server
      summary: Existing server bijwerken.
      description: Bijwerken of the wijzigbare gegevens van een server.
      operationId: updateServer
      consumes:
      - application/json
      - application/xml
      produces:
      - application/xml
      - application/json
      parameters:
      - description: Server to be edited
        in: body
        name: payload
        required: true      
        schema:
          $ref: '#/definitions/server'
      responses:
        "201":
          description: Updated
          schema:
            $ref: '#/definitions/server'
        "400":
          description: ID ongeldig/bestaat niet
        "404":
          description: Server niet gevonden
        "405":
          description: Validatieprobleem
        "501":
          description: Not implemented
  /servers/{id}:
    get:
      tags:
      - server
      summary: Find server on ID.
      description: Returns single server
      operationId: getServerById
      produces:
      - application/xml
      - application/json
      parameters:
      - description: Server to be found
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/server'
        "404":
          description: Not Found
        "405":
          description: Invalid input
        "500":
          description: Internal Server Error
        "501":
          description: Not implemented
      security:
      - api_key: []
    post:
      tags:
      - server
      summary: Edit server with form data.
      description: None
      operationId: updateServerWithForm
      consumes:
      - application/x-www-form-urlencoded
      produces:
      - application/xml
      - application/json
      parameters:
      - description: ID of the server to be edited
        in: path
        name: id
        required: true
        type: integer
      - description: Edited name
        in: formData
        name: name        
        required: false
        type: string
      - description: Edited status
        in: formData
        name: status
        required: false
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/server'
        "404":
          description: Not Found
        "405":
          description: Invalid input
        "500":
          description: Internal Server Error
        "501":
          description: Not implemented
    delete:
      tags:
      - server
      summary: Delete a server.
      description: Delete a server.
      operationId: deleteServer
      produces:
      - application/xml
      - application/json
      parameters:
      - name: "api_key"
        in: "header"
        required: false
        type: "string"
      - description: ID of the server to be deleted
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/server'
        "404":
          description: Not Found
        "405":
          description: Invalid input
        "500":
          description: Internal Server Error
        "501":
          description: Not implemented
  /pf-images/:
    post:
      tags:
      - image
      summary: Add an image
      description: Image must be approved
      operationId: addPfImage
      consumes:
      - application/json
      - application/xml
      produces:
      - application/xml
      - application/json
      parameters:
      - description: Image to be added
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/image'
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/image'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/error'
        "405":
          description: Invalid input
        "500":
          description: Internal Server Error
        "501":
          description: Not implemented
  /pf-images/{id}:
    get:
      tags:
      - image
      summary: Find image on ID.
      description: Retruns a single image
      operationId: getPfImageById
      x-terraform-resource-host: portfolio.services.test:443 # We need to get the Image data from the profolio server, not the API server.
      produces:
      - application/xml
      - application/json
      parameters:
      - description: Image to be found
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/image'
        "404":
          description: Not Found
        "405":
          description: Invalid input
        "500":
          description: Internal Server Error
        "501":
          description: Not implemented
      security:
      - api_key: []
  /images/:
    post:
      tags:
      - image
      summary: Add an image
      description: Image must be approved
      operationId: addImage
      consumes:
      - application/json
      - application/xml
      produces:
      - application/xml
      - application/json
      parameters:
      - description: Image to be added
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/image'
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/image'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/error'
        "405":
          description: Invalid input
        "500":
          description: Internal Server Error
        "501":
          description: Not implemented
    put:
      tags:
      - image
      summary: Edit image
      description: Edit image
      operationId: updateImage
      consumes:
      - application/json
      - application/xml
      produces:
      - application/xml
      - application/json
      parameters:
      - description: Image to be edited
        in: body
        name: payload
        required: true      
        schema:
          $ref: '#/definitions/image'
      responses:
        "201":
          description: Updated
          schema:
            $ref: '#/definitions/image'
        "400":
          description: Bad Request
        "404":
          description: Not Found
        "405":
          description: Validation error
        "501":
          description: Not implemented
  /images/{id}:
    get:
      tags:
      - image
      summary: Find image on ID.
      description: Retruns a single image
      operationId: getImageById
      produces:
      - application/xml
      - application/json
      parameters:
      - description: Image to be found
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/image'
        "404":
          description: Not Found
        "405":
          description: Invalid input
        "500":
          description: Internal Server Error
        "501":
          description: Not implemented
      security:
      - api_key: []
    post:
      tags:
      - image
      summary: Edit image with form data.
      description: None
      operationId: updateImageWithForm
      consumes:
      - application/x-www-form-urlencoded
      produces:
      - application/xml
      - application/json
      parameters:
      - description: ID of the image to be edited
        in: path
        name: id
        required: true
        type: integer
      - description: Edited name
        in: formData
        name: name        
        required: false
        type: string
      - description: Edited status
        in: formData
        name: status
        required: false
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/image'
        "404":
          description: Not Found
        "405":
          description: Invalid input
        "500":
          description: Internal Server Error
        "501":
          description: Not implemented
    delete:
      tags:
      - image
      summary: Delete a image.
      description: Delete a image.
      operationId: deleteImage
      produces:
      - application/xml
      - application/json
      parameters:
      - name: "api_key"
        in: "header"
        required: false
        type: "string"
      - description: ID of the image to be deleted
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/image'
        "404":
          description: Not Found
        "405":
          description: Invalid input
        "500":
          description: Internal Server Error
        "501":
          description: Not implemented

definitions:
  error:
    description: Error response media type (default view)
    example:
      code: invalid_value
      detail: Value of ID must be an integer
      id: 000000001
      meta:
        timestamp: 1.458609e+09
      status: "400"
    properties:
      code:
        description: an application-specific error code, expressed as a string value.
        example: invalid_value
        type: string
      detail:
        description: a human-readable explanation specific to this occurrence of the
          problem.
        example: Value of ID must be an integer
        type: string
      id:
        description: a unique identifier for this particular occurrence of the problem.
        example: 3F1FKVRR
        type: string
      meta:
        additionalProperties: true
        description: a meta object containing non-standard meta-information about
          the error.
        example:
          timestamp: 1.458609e+09
        type: object
      status:
        description: the HTTP status code applicable to this problem, expressed as
          a string value.
        example: "400"
        type: string
    title: 'Error'
    type: object
  contract:
    title: contract
    type: object
    description: Contract in the datacenter
    example:
      id: 1
      name: Richie
      description: The paying party
      costcenter: 123456789
      status: Operational
    properties:
      id:
        description: Unique contract ID
        example: 1
        readOnly: true
        type: integer
      name:
        description: Name of contract
        example: krt
        minLength: 1
        type: string
      description:
        description: Description of contract
        example: x
        minLength: 1
        type: string
      costcenter:
        description: Costcenter of contract
        example: 123456789
        type: string
      status:
        description: Status of contract
        example: Active
        type: string
        enum:
        - Active
        - Inactive
    required:
    - name
    - costcenter
    - status
    xml:
      name: contract
  tenant:
    title: tenant
    type: object
    description: Tenant in the datacenter
    example:
      id: 1
      name: hushhush
      description: The secret tenant
      costcenter: 123456789
      status: Operational
    properties:
      id:
        description: Unique tenant ID
        example: 1
        readOnly: true
        type: integer
      name:
        description: Name of tenant
        example: krt
        minLength: 1
        type: string
      description:
        description: Description of tenant
        example: x
        minLength: 1
        type: string
      party:
        description: Name of the contract
        example: "Betaler" 
        minLength: 1
        type: string
      status:
        description: Status of tenant
        example: Operational
        type: string
        enum:
        - Radar
        - Planned
        - Global Design
        - Detail design
        - Build
        - Test
        - Accept
        - RFS
        - Operationeel
        - End-of-life
        - Retired
        - Deleted
    required:
    - name
    - party
    xml:
      name: tenant
  az:
    title: az
    type: object
    description: AZ in the datacenter
    example:
      id: 1
      name: shared
      description: The shared az
      region: ODC
      az: 1
      party: PROV
      status: Operational
    properties:
      id:
        description: Unique az ID
        example: 1
        readOnly: true
        type: integer
      name:
        description: Name of az
        example: AP1
        minLength: 1
        type: string
      description:
        description: Description of AZ
        example: Some AZ somewhere
        minLength: 1
        type: string
      region:
        description: Regio/cloud where the AZ is build
        example: ODC
        type: string
        enum:
        - North
        - West
        - Sounth
        - East
        - Azure
        - AWS
      az:
        description: Availability Zone waarin de AZ is gebuildd binnen de regio
        example: ODC
        type: string
        enum:
        - South/1
        - South/2
        - South/3
        - East
        - Azure
      party:
        description: Name of the contract
        example: "Betaler" 
        minLength: 1
        type: string
      status:
        description: Status of az
        example: Operational
        type: string
        enum:
        - Radar
        - Planned
        - Global Design
        - Detail design
        - Build
        - Test
        - Accept
        - RFS
        - Operationeel
        - End-of-life
        - Retired
        - Deleted
    required:
    - name
    xml:
      name: az
  application:
    title: application
    type: object
    description: Application in the datacenter
    example:
      id: 1
      name: MyApp
      description: MySuperduperApp
      party: PROV
      pod: AP01
      status: Operational
    properties:
      id:
        description: Unique application ID
        example: 1
        readOnly: true
        type: integer
      name:
        description: Name of application
        example: MyApp
        minLength: 1
        type: string
      description:
        description: Description of Application
        example: Some Application somewhere
        minLength: 1
        type: string
      party:
        description: Name of the contract
        example: "Betaler" 
        minLength: 1
        type: string
      pod:
        description: Name of the App-PoD
        example: "AP01" 
        minLength: 1
        type: string    
      status:
        description: Status of application
        example: Operational
        type: string
        enum:
        - Radar
        - Planned
        - Global Design
        - Detail design
        - Build
        - Test
        - Accept
        - RFS
        - Operationeel
        - End-of-life
        - Retired
        - Deleted
    required:
    - name
    - status
    xml:
      name: application
  environment:
    title: environment
    type: object
    description: Environment in the datacenter
    example:
      id: 1
      name: Dev
      description: Dev environment MyApp
      party: PROV
      pod: AP01
      subnet: 1.2.3.0
      mask: 24
      nos: 24
      status: Operational
    properties:
      id:
        description: Unique environment ID
        example: 1
        readOnly: true
        type: integer
      name:
        description: Name of environment
        example: MyApp
        minLength: 1
        type: string
      description:
        description: Description of Environment
        example: Some Environment somewhere
        minLength: 1
        type: string
      party:
        description: Name of the contract
        example: "Betaler" 
        minLength: 1
        type: string
      pod:
        description: Name of the App-PoD
        example: "AP01" 
        minLength: 1
        type: string
      subnet:
        description: subnet
        example: 1.2.3.4
        readOnly: true
        type: string
      mask:
        description: subnet in bits
        example: 24
        readOnly: true
        type: string
      nos:
        description: Number of Servers
        example: 1-4 
        minLength: 1
        type: integer
        enum:
        - 10
        - 24
        - 60
      status:
        description: Status of environment
        example: Operational
        type: string
        enum:
        - Radar
        - Planned
        - Global Design
        - Detail design
        - Build
        - Test
        - Accept
        - RFS
        - Operationeel
        - End-of-life
        - Retired
        - Deleted
    required:
    - name
    - status
    xml:
      name: environment
  server:
    title: server
    type: object
    description: Server in the datacenter
    example:
      id: 1
      name: Frontend
      description: Frontend server MyApp
      party: PROV
      env: Dev
      size: XL
      status: Operational
    properties:
      id:
        description: Unique server ID
        example: 1
        readOnly: true
        type: integer
      name:
        description: Name of server
        example: MyApp
        minLength: 1
        type: string
      description:
        description: Description of Server
        example: Some Server somewhere
        minLength: 1
        type: string
      party:
        description: Name of the contract
        example: "Betaler" 
        minLength: 1
        type: string
      env:
        description: Name of the Environment
        example: "AP01" 
        minLength: 1
        type: string
      size:
        description: Grootte of the server
        example: "XL"
        readOnly: true
        type: string
      image:
        description: The ID of the OS
        example: 1
        type: integer
      status:
        description: Status of server
        example: Operational
        type: string
        enum:
        - Radar
        - Planned
        - Global Design
        - Detail design
        - Build
        - Test
        - Accept
        - RFS
        - Operationeel
        - End-of-life
        - Retired
        - Deleted
    required:
    - name
    - status
    xml:
      name: server
  image:
    title: image
    type: object
    description: Some image
    example:
      id: 1
      name: Windows_Core_2022
      description: OS type
      party: PROV
      env: Dev
      size: XL
      status: Operational
    properties:
      id:
        description: Unique image ID
        example: 1
        readOnly: true
        type: integer
      name:
        description: Name of image
        example: MyApp
        minLength: 1
        type: string
      description:
        description: Description of Image
        example: My awesome OS image
        minLength: 1
        type: string
      type:
        description: Image type
        example: Container
        type: string
        enum:
        - VM
        - Container
      os:
        description: Image OS
        example: Alpine
        type: string
        enum:
        - Windows_server_2019
        - Windows_core_2019
        - Windows_server_2022
        - Windows_core_2022
        - RHEL8
      status:
        description: Status of image
        example: Operational
        type: string
        enum:
        - Radar
        - Planned
        - Global Design
        - Detail design
        - Build
        - Test
        - Accept
        - RFS
        - Operationeel
        - End-of-life
        - Retired
        - Deleted
    required:
    - name
    - status
    xml:
      name: image
  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
      type:
        type: "string"
      message:
        type: "string"

